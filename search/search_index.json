{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"My Learning Notes","text":"<p>Welcome to my learning notes.</p> <p>I'm focusing on Linux, Bash Scripting, Python Scripting, Docker and Kubernetes.</p>"},{"location":"Linux/ssh.html","title":"ssh","text":""},{"location":"Linux/ssh.html#opening-software-on-a-remote-server-via-x11","title":"Opening Software on a Remote Server via X11","text":""},{"location":"Linux/ssh.html#on-the-server-x11-server","title":"On the server (X11-SERVER)","text":"<pre><code># Install necessary packages\nyum install -y xorg-x11-xauth\n# This is a rough implementation;\n# Should use sed for a more precisec onfiguration.\necho \"unset LIBGL_ALWAYS_INDIRECT\" &gt;&gt; ~/.bashrc\necho \"export DISPLAY=:0.0\" &gt;&gt; ~/.bashrc\nsudo bash -c \"echo 'X11Forwarding yes\nX11UseLocalhost no\nX11DisplayOffset 10' &gt;&gt; /etc/ssh/sshd_config\"\nsudo systemctl restart sshd\n</code></pre>"},{"location":"Linux/ssh.html#on-the-client-x11-client","title":"On the client (X11-CLIENT)","text":"<pre><code>ssh -XYT \"${X11-SERVER-IP}\" xclock\n</code></pre>"},{"location":"Linux/ssh.html#compiling-openssh-with-musl","title":"Compiling OpenSSH with musl","text":"<p>Updating OpenSSH on a Linux host is a common task. According to CVE-2024-6387, this security risk affects many openssh-server compiled with glibc. In this article, I will try to compile a static OpenSSH on Alpine Linux and see whether it can run properly on RHEL.</p>"},{"location":"Linux/ssh.html#requirements","title":"Requirements","text":"<ul> <li>musl, pre-installed on Alpine Linux.</li> <li>openssh-9.8p1</li> <li>Other system packages: see below</li> </ul>"},{"location":"Linux/ssh.html#steps","title":"Steps","text":""},{"location":"Linux/ssh.html#1-install-required-system-packages","title":"1. Install Required System Packages","text":"<pre><code>apk update &amp;&amp; apk upgrade &amp;&amp; apk add autoconf build-base linux-headers linux-pam-dev zlib-dev openssl-dev zlib-static musl-dev openssl-libs-static\n</code></pre>"},{"location":"Linux/ssh.html#2-download-source-code-packages","title":"2. Download Source Code Packages","text":"<p>Download the source code packages to the /tmp/src/ directory.</p>"},{"location":"Linux/ssh.html#3-compile-openssh","title":"3. Compile openssh","text":"<pre><code>rm -rf /tmp/openssh_src/\nmkdir -p /tmp/openssh_src/\ntar xf \"${SRC_DIR}/${openssh_package}\" \\\n   -C /tmp/openssh_src/ \\\n   --strip-components 1\ncd /tmp/openssh_src/ || exit 99\n(\n   autoconf\n   ./configure --prefix=\"${PREFIX_DIR}\" \\\n      --sysconfdir=/etc/ssh \\\n      --with-zlib \\\n      --with-ssl-dir=/usr/include/openssl \\\n      --with-ldflags=-static\n      make -j \"$(($(nproc) + 1))\" &amp;&amp;\n      make install\n) 2&gt;&amp;1 | tee /tmp/compile_openssh.log\n</code></pre>"},{"location":"Linux/ssh.html#4-something-to-be-improved","title":"4. Something To be Improved","text":"<ol> <li>sshd won't log to wtmp and btmp file</li> <li>no pam intergration</li> <li>no gssapi support</li> <li>no kerbros support</li> </ol>"},{"location":"blog/index.html","title":"Blog","text":""},{"location":"blog/2024/08/05/deploying-a-cicd-infrastructure-with-docker-compose.html","title":"Deploying a CI/CD Infrastructure with Docker Compose","text":"<p>In this article, I will demonstrate how to deploy a CI/CD infrastructure using Docker Compose. It will require the following components:</p> <ul> <li>a database (postgres)</li> <li>a git server (gitea)</li> <li>a reverse proxy server (openresty)</li> <li>jenkins</li> </ul>"},{"location":"blog/2024/08/05/deploying-a-cicd-infrastructure-with-docker-compose.html#create-two-docker-network-bridges","title":"Create Two Docker Network Bridges","text":"<pre><code># For any app that needs to connect to PostgreSQL\ndocker network create --driver bridge postgres_network\n# For the reverse proxy server to connect to the Gitea web service\ndocker network create --driver bridge gitea_network\n# For jenkins/dind/openresty\ndocker network create --driver bridge jenkins\n</code></pre>"},{"location":"blog/2024/08/05/deploying-a-cicd-infrastructure-with-docker-compose.html#create-jenkins-named-volumes","title":"Create Jenkins Named Volumes","text":"<pre><code># Data Volumes share data between dind, jekins, and openresty(jenkins's web static file)\ndocker volume create jenkins-data\ndocker volume create jenkins-docker-certs\n</code></pre>"},{"location":"blog/2024/08/05/deploying-a-cicd-infrastructure-with-docker-compose.html#start-postgres","title":"Start Postgres","text":"<p>Use the Docker Compose File to start a PostgreSQL server, Besides the offical postgres image, Bitnami/PostgreSQL is also a good choice as it provides more flexable control over postgres.</p>"},{"location":"blog/2024/08/05/deploying-a-cicd-infrastructure-with-docker-compose.html#config-gitea-database","title":"Config Gitea Database","text":"<pre><code># Replace 'giteaPassword' with a strong password\ndocker compose exec -it postgres psql -U postgres -c \"CREATE ROLE gitea WITH LOGIN PASSWORD 'giteaPassword';\"\ndocker compose exec -it postgres psql -U postgres -c \"CREATE DATABASE giteadb WITH OWNER gitea TEMPLATE template0 ENCODING UTF8 LC_COLLATE 'en_US.UTF-8' LC_CTYPE 'en_US.UTF-8';\"\n</code></pre>"},{"location":"blog/2024/08/05/deploying-a-cicd-infrastructure-with-docker-compose.html#start-gitea","title":"Start Gitea","text":"<p>Use the Docker Compose File to start up gitea server. Remember to replace <code>GITEA__database__PASSWD</code> and <code>SECRET_KEY</code> with strong values., the <code>HTTP_PORT</code> is irrelevant as we will only expose it on the internal <code>gitea_network</code>. To publish the Gitea service with a subpath like <code>/gitea</code>, configure <code>DOMAIN</code> and <code>ROOT_URL</code> accordingly.</p> <p>After Gitea starts, create an administrator account</p> <pre><code>docker compose exec -it gitea su git -c \"gitea admin user create --username &lt;ADMIN&gt; --password &lt;AdminPassword&gt; --email &lt;AdminEmailAddress&gt;\"\n</code></pre>"},{"location":"blog/2024/08/05/deploying-a-cicd-infrastructure-with-docker-compose.html#jenkins","title":"Jenkins","text":"<p>https://www.jenkins.io/doc/book/installing/docker/ https://www.jenkins.io/doc/book/system-administration/reverse-proxy-configuration-with-jenkins/reverse-proxy-configuration-nginx/ It's quite tricky here, in order to use OpenResty to reverse proxy Jenkins web interface to a sub directory, we must start jenkins with the argument <code>--prefix=/jenkins</code>. However the offical document does not mention this, and in fact, the official Jenkins image doesn't support changing the startup behavior through environment variables. Therefore, we have to use <code>docker image inspect jenkins/jenkins:lts-jdk21</code> to find that he <code>Entrypoint</code> is <code>/usr/bin/tini -- /usr/local/bin/jenkins.sh</code>. To achieve our goal, we'll need to overwrite it with <code>/usr/bin/tini -- /usr/local/bin/jenkins.sh --prefix=/jenkins</code> in the Docker Compose File</p>"},{"location":"blog/2024/08/05/deploying-a-cicd-infrastructure-with-docker-compose.html#reverse-proxy-server","title":"Reverse Proxy Server","text":"<p>I'll use OpenResty as a reverse proxy server. It's like an Nginx server with many plugins, so I won't need to recompile Nginx for additional functionality.</p> <p>First, create an Nginx configuration file. Similar to the official Nginx Docker image, the OpenResty Docker image allows users to customize the configuration file by overwriting <code>/etc/nginx/conf.d/default.conf</code> within the container. The main configuration file <code>/usr/local/openresty/nginx/conf/nginx.conf</code> has an entry <code>include conf.d/*.conf</code>. Here's my configuration file:</p> <pre><code>server_tokens off;\nresolver 127.0.0.11 valid=30s;\nlog_format main '$remote_addr - $remote_user [$time_local] \"$request\" '\n'$status $body_bytes_sent \"$http_referer\" '\n'\"$http_user_agent\" \"$http_x_forwarded_for\"';\ntcp_nopush on;\ntcp_nodelay on;\ntypes_hash_max_size 4096;\nclient_max_body_size 1024M;\nserver {\n    listen your_http_port;\n    server_name _;\n    charset utf-8;\n    access_log /var/log/nginx/access.log main;\n    error_log /var/log/nginx/error.log info;\n    # pass through headers from Jenkins that Nginx considers invalid\n    ignore_invalid_headers off;\n\n    add_header X-Frame-Options SAMEORIGIN;\n\n    location / {\n        root /usr/local/openresty/nginx/html;\n        index index.html index.htm;\n    }\n    include /etc/nginx/default.d/*.conf;\n}\n</code></pre> <p>In the configuation above, we utilize <code>include /etc/nginx/default.d/*.conf;</code> directive within the <code>server</code> block to modularize location configuration for each application. This approach enhances configuration management by separating concerns and promoting better organization.</p> <pre><code># gitea location\nlocation ~ ^/(gitea|v2)($|/) {\n   access_log /var/log/nginx/gitea.log main;\n   error_log /var/log/nginx/gitea.log info;\n   rewrite ^ $request_uri;\n   rewrite ^(/gitea)?(/.*) $2 break;\n   proxy_pass http://gitea:3000$uri;\n   proxy_set_header Connection $http_connection;\n   proxy_set_header Upgrade $http_upgrade;\n   proxy_set_header Host $host;\n   proxy_set_header X-Real-IP $remote_addr;\n   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n   proxy_set_header X-Forwarded-Proto $scheme;\n}\n</code></pre> <pre><code># jenkins location\nlocation ~ \"^/jenkins/static/[0-9a-fA-F]{8}\\/(.*)$\" {\n    rewrite \"^/jenkins/static/[0-9a-fA-F]{8}/(.*)\" /jenkins/$1 last;\n}\nlocation /jenkins/userContent {\n    root /var/jenkins_home/userContent;\n    if (!-f $request_filename) {\n        rewrite (.*) /$1 last;\n        break;\n    }\n}\nlocation /jenkins/ {\n    access_log /var/log/nginx/jenkins.log main;\n    error_log /var/log/nginx/jenkins.log info;\n    proxy_pass http://jenkins-blueocean:8080/jenkins/;\n    proxy_redirect default;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n    proxy_set_header Host $http_host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    proxy_max_temp_file_size 0;\n    client_max_body_size 10m;\n    client_body_buffer_size 128k;\n    proxy_connect_timeout 90;\n    proxy_send_timeout 90;\n    proxy_read_timeout 90;\n    proxy_request_buffering off; # Required for HTTP CLI commands\n    root /var/jenkins_home/war/;\n}\n</code></pre> <p>To serve Jenkins' static web content using OpenResty, we must mount the Jenkins data volume: <code>`jenkins-data</code> into the OpenResty container. Subsequently, the OpenResty configuration should be adjusted to set the <code>root</code> directive within the relevant location block to <code>/var/jenkins_home/war/</code>. This ensures that OpenResty correctly locates and serves the necessary static files.</p> <p>Then, start the OpenResty server using the Compose file. After that, we can access the gitea server using the accout we created</p>"},{"location":"blog/archive/2024.html","title":"2024","text":""}]}